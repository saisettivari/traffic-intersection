#include<stdio.h>
#include<stdlib.h>
#include<pthread.h>
#include<semaphore.h>

int veh;
#define MAX_VEH 25
int enter=0;
struct direction
{
  int vid,ori,dest;
};
pthread_mutex_t l;
struct direction object[MAX_VEH];
void *intersection(void *args)
{
	pthread_mutex_lock(&l);
   	struct direction *obj=args;
   	int i;
 	for(i=1;i<=veh;i++)
	{
	printf("\n\n********** VEHICLES %d AND %d ENTERS INTERSECTION **********",i,i+1);
	if(obj[i].ori==obj[i+1].dest && obj[i].dest==obj[i+1].ori)
    	{
      	printf("\nPRESS OK TO PASS THE VEHICLES(%d and %d) THROUGH INTERSECTION: ",i,i+1);
    	}
    	else if(obj[i].ori==obj[i+1].ori)
    	{
      	printf("\nPRESSVOK TO PAS THE VEHICLES THROUGH INTERSECTION: ");
    	}
    	else if(obj[i].dest!=obj[i+1].dest)
    	{
      	switch(obj[i].ori)
      	{
        case 0:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES EAST TO NORTH",i);
          break;
          case 1:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES WEST TO SOUTH",i);
          break;
        case 2:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES  NORTH TO WEST",i);
          break;
        case 3:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES  SOUTH TO EAST",i);
          break;
      }
      switch(obj[i+1].ori)
      {
        case 0:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES EAST TO NORTH",i+1);
          break;
          case 1:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES WEST TO SOUTH",i+1);
          break;
        case 2:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES  NORTH TO WEST",i+1);
          break;
        case 3:
          printf("\nVEHICLES %d TAKE RIGHT TURN - GOES  SOUTH TO EAST",i+1);
          break;
      }
    }i++;
}
pthread_mutex_unlock(&l);
}
enum dir{East=0,West=1,North=2,South=3};
void *genrateVeh(void *vehInfo)
{
  struct direction *obj=vehInfo;
  int a,b;
  while(1)
  {
    a=rand()%4;
    b=rand()%4;
    if(a!=b)
    break;
  }
  obj->ori=a;
  obj->dest=b;
  
    printf("\nvehicles %d goes from %d ----> %d\n\n",obj->vid,obj->ori,obj->dest);
}
int main()
{
  printf("\n\n\t***** TRAFIC INTERSECTION PROBLEM *****\t\n\n");
  printf("East : 0\nWEST : 1\nNORTH : 2\nSUTH : 3\n");
  printf("\nENTER THE NUMBER VEHICLES : ");
  scanf("%d",&veh);
  pthread_t veh_id[veh];
  struct direction object[veh];
  pthread_t inter;
	int temp=0;  
pthread_mutex_t l; 
if(temp==0)
	{

int i;
 for(i=1;i<=veh;i++)
  {
    object[i].vid=i;
    pthread_create(&veh_id[i],NULL,genrateVeh,(void*)&object[i]);
  }
	
  for(i=1;i<=veh;i++)
  {
    pthread_join(veh_id[i],NULL);
  }

temp+=1;
}
if(temp==1)
{

pthread_create(&inter,NULL,intersection,&object);
  pthread_join(inter,NULL);
}
 
  return 0;
}
